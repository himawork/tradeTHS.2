if (money < 30000) {moneyTF = FALSE}
}
} else if (indicator == 'running') {
if (ChangeRate <= -8) {
cat('Gobuy.500 with ChangeRate <= -8\n')
GoBuy(Stock = Scode, plusN = 500); DoneBuy5 = c(DoneBuy5,Scode)
money = money - Current * 500
if (money < 30000) {moneyTF = FALSE}
} else if (ChangeRate <= -5 & ChangeRate > -8) {
cat('Gobuy.200 with ChangeRate <= -5\n')
GoBuy(Stock = Scode, plusN = 200); DoneBuy2 = c(DoneBuy2,Scode)
money = money - Current * 200
if (money < 30000) {moneyTF = FALSE}
}
}
}
}  }
indicator = read.table('e:/tess/indicator.info')[1,1]
Sys.sleep(10);          for (Scode in testCode) {
bandCrovalue = testbandCro(Scode,Type = 'sting', K_type = 'dailyK',bandFrom = 10, bandNum = 4)
if (moneyTF & bandCrovalue) {
cat(paste0('Test buy condition of ',Scode,'...\n'))
dailyK.old = readRDS('e:/tess/SpySto.RDS')[['sting']][[Scode]][['dailyK']]
Close = dailyK.old$CLOSE[1]
Current = getPrice(Scode = Scode)
ChangeRate = (Current - Close)/Close * 100
sdJ1 = dailyK.old[1,'J'] - dailyK.old[2,'J'];sdJ2 = dailyK.old[2,'J'] - dailyK.old[3,'J']
sdJ1 = ifelse(!anyNA(sdJ1),sdJ1,0); sdJ2 = ifelse(!anyNA(sdJ2),sdJ2,0);
dayPriT <- Current <= (max(dailyK.old$HIGH[1:7]) * 0.2  + min(dailyK.old$LOW[1:7]) * 0.8)
# test buy condition...
if (sdJ1 > sdJ2 & Current > 10 & Current < 30 & dailyK.old[1,'J'] < 90 & dayPriT) {
if (indicator == 'sting') {
if (ChangeRate <= -8) {
cat('Gobuy.1000 with ChangeRate <= -8\n')
GoBuy(Stock = Scode, plusN = 1000); DoneBuy10 = c(DoneBuy10,Scode)
money = money - Current * 1000
if (money < 30000) {moneyTF = FALSE}
} else if (ChangeRate <= -5 & ChangeRate > -8) {
cat('Gobuy.500 with ChangeRate <= -5\n')
GoBuy(Stock = Scode, plusN = 500); DoneBuy5 = c(DoneBuy5,Scode)
money = money - Current * 500
if (money < 30000) {moneyTF = FALSE}
} else if (ChangeRate <= -2 & ChangeRate > -5) {
cat('Gobuy.300 with ChangeRate <= -2\n')
GoBuy(Stock = Scode, plusN = 300); DoneBuy2 = c(DoneBuy2,Scode)
money = money - Current * 300
if (money < 30000) {moneyTF = FALSE}
} else if (dayPriT) {
cat('Gobuy.300 with Current < dayPriT\n')
GoBuy(Stock = Scode, plusN = 300); DoneBuy2 = c(DoneBuy2,Scode)
money = money - Current * 300
if (money < 30000) {moneyTF = FALSE}
}
} else if (indicator == 'running') {
if (ChangeRate <= -8) {
cat('Gobuy.500 with ChangeRate <= -8\n')
GoBuy(Stock = Scode, plusN = 500); DoneBuy5 = c(DoneBuy5,Scode)
money = money - Current * 500
if (money < 30000) {moneyTF = FALSE}
} else if (ChangeRate <= -5 & ChangeRate > -8) {
cat('Gobuy.200 with ChangeRate <= -5\n')
GoBuy(Stock = Scode, plusN = 200); DoneBuy2 = c(DoneBuy2,Scode)
money = money - Current * 200
if (money < 30000) {moneyTF = FALSE}
}
}
}
}  }
# prepare parameters for trading
DoneBuy10 = NULL;DoneBuy7 = NULL;DoneBuy5 = NULL;DoneBuy2 = NULL
# send trading messages
sys.user = Sys.info()[['nodename']]
T.invest = sum(as.numeric(readRDS('e:/tess/Hsto.info.RDS')$市值))
T.profit = sum(as.numeric(readRDS('e:/tess/Hsto.info.RDS')$盈亏))
Hsto.info = readRDS('e:/tess/Hsto.info.RDS')
T.profit = sum(as.numeric(readRDS('e:/tess/Hsto.info.RDS')$参考盈亏))
DailyRealPrice = readRDS('e:/tess/DailyRealPrice.RDS')
ScodeNums = names(readRDS('e:/tess/SpySto.RDS')[['sting']])
Spycode = readRDS('e:/tess/Hsto.info.RDS')$证券代码
testCode = ScodeNums[which(!ScodeNums %in% Spycode)]
exclude = read.table('e:/tess/exclude.info',colClasses = 'character')[,1]
testCode1 = testCode[which(!testCode %in% exclude)]
shell('start /MIN /D "C:\\Program Files (x86)\\Oray\\SunLogin\\SunloginClient" SunloginClient.exe',wait = F)
Hsto.info = readRDS('e:/tess/Hsto.info.RDS')
T.invest = sum(as.numeric(readRDS('e:/tess/Hsto.info.RDS')$市值))
T.profit = sum(as.numeric(readRDS('e:/tess/Hsto.info.RDS')$参考盈亏))
Hsto.info = readRDS('e:/tess/Hsto.info.RDS')
T.invest = sum(as.numeric(readRDS('e:/tess/Hsto.info.RDS')$市值))
T.profit = sum(as.numeric(readRDS('e:/tess/Hsto.info.RDS')$参考盈亏))
Spycode = readRDS('e:/tess/Hsto.info.RDS')$证券代码
indicator = read.table('e:/tess/indicator.info')[1,1]
Scode = c('002552')
ProLess <- (Hdays %/% 30 + 1) * 200
Hdays <-  Hsto.info$持股天数[which(Hsto.info$证券代码 == Scode)] %>% as.numeric()
library(rvest)
Hdays <-  Hsto.info$持股天数[which(Hsto.info$证券代码 == Scode)] %>% as.numeric()
ProLess <- (Hdays %/% 30 + 1) * 200
RealPrice = readRDS('e:/tess/RealPrice.RDS')
for (n in 1:length(RealPrice)) {
if (length(RealPrice[[n]][[1]]) > limitN) {RealPrice[[n]][[1]] = RealPrice[[n]][[1]][1:limitN]}
}
imitN = 1000
for (n in 1:length(RealPrice)) {
if (length(RealPrice[[n]][[1]]) > limitN) {RealPrice[[n]][[1]] = RealPrice[[n]][[1]][1:limitN]}
}
limitN = 1000
for (n in 1:length(RealPrice)) {
if (length(RealPrice[[n]][[1]]) > limitN) {RealPrice[[n]][[1]] = RealPrice[[n]][[1]][1:limitN]}
}
T.profit = sum(as.numeric(readRDS('e:/tess/Hsto.info.RDS')$盈亏))
T.profit = sum(as.numeric(readRDS('e:/tess/Hsto.info.RDS')$参考盈亏))
as.numeric(readRDS('e:/tess/Hsto.info.RDS')$盈亏)
Hist = readRDS('e:/tess/Hsto.info.RDS')
DailyTrade = readRDS('e:/tess/DailyTrading.RDS')
RealPrice = readRDS('e:/tess/RealPrice.RDS')
# load functions
source('e:/Scientist career/R_files/201911/THS/Functions.R',echo = F,encoding = 'UTF-8')
dydata()
RealPrice = readRDS('e:/tess/RealPrice.RDS')
DailyTrade = readRDS('e:/tess/DailyTrading.RDS')
DailyRealPrice = readRDS('e:/tess/DailyRealPrice.RDS')
Spycode = readRDS('e:/tess/Hsto.info.RDS')$证券代码
indicator = read.table('e:/tess/indicator.info')[1,1]
ScodeNums = names(readRDS('e:/tess/SpySto.RDS')[['sting']])
Spycode = readRDS('e:/tess/Hsto.info.RDS')$证券代码
testCode = ScodeNums[which(!ScodeNums %in% Spycode)]
exclude = read.table('e:/tess/exclude.info',colClasses = 'character')[,1]
testCode1 = testCode[which(!testCode %in% exclude)]
testCode1
Scode = testCode1[1]
dailyK.old = readRDS('e:/tess/SpySto.RDS')[['sting']][[Scode]][['dailyK']]
Close = dailyK.old$CLOSE[1]
Close3 = dailyK.old$CLOSE[3]
Close7 = dailyK.old$CLOSE[7]
ChangeRate3 = (Close - Close3)/Close3 * 100
ChangeRate7 = (Close - Close7)/Close7 * 100
ChangeRateTest = (ChangeRate3 > -2 & ChangeRate7 < -5  &
min(dailyK.old$CLOSE[1:3]) <= min(dailyK.old$CLOSE[1:30]))
bandCrovalue = testbandCro(Scode,Type = 'sting', K_type = 'dailyK',bandFrom = 10, bandNum = 4)
Scode = testCode1[2]
dailyK.old = readRDS('e:/tess/SpySto.RDS')[['sting']][[Scode]][['dailyK']]
Close = dailyK.old$CLOSE[1]
Close3 = dailyK.old$CLOSE[3]
Close7 = dailyK.old$CLOSE[7]
ChangeRate3 = (Close - Close3)/Close3 * 100
ChangeRate7 = (Close - Close7)/Close7 * 100
ChangeRateTest = (ChangeRate3 > -2 & ChangeRate7 < -5  &
min(dailyK.old$CLOSE[1:3]) <= min(dailyK.old$CLOSE[1:30]))
bandCrovalue = testbandCro(Scode,Type = 'sting', K_type = 'dailyK',bandFrom = 10, bandNum = 4)
Scode = testCode1[3]
dailyK.old = readRDS('e:/tess/SpySto.RDS')[['sting']][[Scode]][['dailyK']]
Close = dailyK.old$CLOSE[1]
Close3 = dailyK.old$CLOSE[3]
Close7 = dailyK.old$CLOSE[7]
ChangeRate3 = (Close - Close3)/Close3 * 100
ChangeRate7 = (Close - Close7)/Close7 * 100
ChangeRateTest = (ChangeRate3 > -2 & ChangeRate7 < -5  &
min(dailyK.old$CLOSE[1:3]) <= min(dailyK.old$CLOSE[1:30]))
bandCrovalue = testbandCro(Scode,Type = 'sting', K_type = 'dailyK',bandFrom = 10, bandNum = 4)
Scode = testCode1[6]
dailyK.old = readRDS('e:/tess/SpySto.RDS')[['sting']][[Scode]][['dailyK']]
Close = dailyK.old$CLOSE[1]
Close3 = dailyK.old$CLOSE[3]
Close7 = dailyK.old$CLOSE[7]
ChangeRate3 = (Close - Close3)/Close3 * 100
ChangeRate7 = (Close - Close7)/Close7 * 100
ChangeRateTest = (ChangeRate3 > -2 & ChangeRate7 < -5  &
min(dailyK.old$CLOSE[1:3]) <= min(dailyK.old$CLOSE[1:30]))
bandCrovalue = testbandCro(Scode,Type = 'sting', K_type = 'dailyK',bandFrom = 10, bandNum = 4)
source('e:/Scientist career/R_files/201911/THS/Functions.R',echo = F,encoding = 'UTF-8')
StingStoNum = names(readRDS('e:/tess/SpySto.RDS')[['sting']])
remDr <- remoteDriver(browserName = "chrome", remoteServerAddr = "localhost", port = 4444)
shell('java -Dwebdriver.chrome.driver="E:/500px/Selenium/chromedriver.exe" -jar "E:/500px/Selenium/selenium-server-standalone-3.141.59.jar" -port 4444', wait = F)
remDr$open();remDr$setWindowSize(2000,1400)
compTime = Sys.Date() - 1
SpySto.db = readRDS('e:/tess/SpySto.RDS')
for (Num in 1:length(StingStoNum)) {
t = StingStoNum[Num]
remDr$navigate(paste0('http://stockpage.10jqka.com.cn/',t))
Sys.sleep(3);  page.raw = remDr$getPageSource()[[1]][1]
## get company details
Company = CompanyDetail()
CCompany = cbind.data.frame(compTime, Company)
SpySto.db[['sting']][[t]][['Company']] = CCompany
## get stock trading details
StoDetail = StoTradeDetail(page.raw)
CStoDetail = cbind.data.frame(compTime, StoDetail)
SpySto.db[['sting']][[t]][['CStoDetail']] = CStoDetail
if (interactive()) {
multicolor::multi_color(paste0('\t\n\t\n',Num,'/',length(StingStoNum),':\n',t))
print(Company);
print(StoDetail)
} else {cat(paste0('\t\n\t\n',Num,'/',length(StingStoNum),': ',t))}
}
#
saveRDS(SpySto.db,'e:/tess/SpySto.RDS')
View(SpySto.db)
shell('git config --global user.email "winlinux116@outlook.com"')
shell('git config --global user.name "himawork"')
# Git repositery to local path ----
tempfile = tempfile('getThems', fileext = '.cmd')
# THS_2
cat(paste0('cd /D "e:/Scientist career/R_files/202005/blogdown/"\n',
'git clone https://github.com/himawork/tradeTHS.2.git'), file = tempfile)
shell.exec(tempfile)
#
# tibble::as.tibble()
# tibble::knit_print.trunc_mat(Detail.Sto)
# knitr::knit_print(Detail.Sto)
# knitr::kable(head(mtcars))
# knitr::kable(Detail.Sto, format = "rst", align = 'c', padding = 2)
#
#
# update spying stock
# file.copy('e:/tess/SpySto.RDS', 'e:/tess/SpySto.DT.RDS', overwrite = T)
SpySto.db = readRDS('e:/tess/SpySto.RDS')
SpySto.DT = readRDS('e:/tess/SpySto.DT.RDS')
length(SpySto.db[['sting']]); length(SpySto.DT[['sting']])
SpySto.db[['sting']][names(SpySto.DT[['sting']][201:250])] = SpySto.DT[['sting']][201:250]
#
saveRDS(SpySto.db,'e:/tess/SpySto.RDS')
#
# tibble::as.tibble()
# tibble::knit_print.trunc_mat(Detail.Sto)
# knitr::knit_print(Detail.Sto)
# knitr::kable(head(mtcars))
# knitr::kable(Detail.Sto, format = "rst", align = 'c', padding = 2)
#
#
# update spying stock
# file.copy('e:/tess/SpySto.RDS', 'e:/tess/SpySto.DT.RDS', overwrite = T)
SpySto.db = readRDS('e:/tess/SpySto.RDS')
length(SpySto.db[['sting']]); length(SpySto.DT[['sting']])
View(SpySto.db)
testStoDB = readRDS('e:/tess/testStoDB.RDS')
RealPrice = readRDS('e:/tess/RealPrice.RDS')
DailyTrade = readRDS('e:/tess/DailyTrading.RDS')
DailyRealPrice = readRDS('e:/tess/DailyRealPrice.RDS')
# load functions
source('e:/Scientist career/R_files/201911/THS/Functions.R',echo = F,encoding = 'UTF-8')
# softStrokeit()
# NetWlan()
Xiadan()
Sys.sleep(30)
money = testName('money')
# test if current display is THS
images = dir('e:/tess/FastScreenShot/',pattern = '.png',full.names = T)
images = images[order(images,decreasing = T)]
image = image_read(images[1])
image_crop(image,geometry_area(70, 16, 330, 1040))
image_crop(image,geometry_area(70, 16, 330, 1040)) %>% image_resize("200x")
image_crop(image,geometry_area(60, 16, 330, 1040)) %>% image_resize("200x")
(image_crop(image,geometry_area(60, 16, 330, 1040)) %>% image_resize("200x") %>%
image_reducenoise(radius = 1.5)  %>%  image_contrast(sharpen = 2)%>%
ocr(engine = numbers) %>% strsplit('\\n'))[[1]] %>%as.numeric() %>% na.omit()
DailyTrade = readRDS('e:/tess/DailyTrading.RDS')
testStoDB = readRDS('e:/tess/testStoDB.RDS')
# Record testStoDB everday
weekDay = timeDate::dayOfWeek(timeDate::Sys.timeDate('Asia/Shanghai'))[[1]]
# test exclude stocks with less profit
ScodeNums = names(readRDS('e:/tess/SpySto.RDS')[['sting']])
# Add shitSto to exclude.info
shitSto.info = read.table('e:/tess/shitSto.info',colClasses = 'character')[,1]
if (file.exists('e:/tess/testStoDB.RDS')) {
testStoDB = readRDS('e:/tess/testStoDB.RDS')
} else {testStoDB = NULL}
exclude = read.table('e:/tess/exclude.info',colClasses = 'character')[,1]
testSto = ScodeNums[which(!ScodeNums %in% exclude)]
stingRes <- data.frame(Scode = c('888888'), ENV.1 = 0)
for (Snum in 1:length(ScodeNums)) {
Scode = ScodeNums[Snum]
cat(paste0(Snum,'/',length(ScodeNums),': ',Scode,'\n'))
dailyTest = bandCrotest(Scode, bandFrom = 15, bandNum = 4, K_type = 'dailyK')
if (length(dailyTest) < 1) {
print(paste0('No profit band of stock ',Scode))
} else {
ENV.1 <- TestbandProfit(Scode,bandRes = dailyTest, MaxHoldDays = 9, mn=6, baseHold = 0, Maxband = 1,
viewNum = 15, JustProfit = T)
stingRes.i <- data.frame(Scode, ENV.1)
stingRes <- rbind.data.frame(stingRes, stingRes.i)
}
}
K.old = readRDS('e:/tess/SpySto.RDS')
View(K.old)
#
# tibble::as.tibble()
# tibble::knit_print.trunc_mat(Detail.Sto)
# knitr::knit_print(Detail.Sto)
# knitr::kable(head(mtcars))
# knitr::kable(Detail.Sto, format = "rst", align = 'c', padding = 2)
#
#
# update spying stock
# file.copy('e:/tess/SpySto.RDS', 'e:/tess/SpySto.DT.RDS', overwrite = T)
SpySto.db = readRDS('e:/tess/SpySto.RDS')
SpySto.db[['sting']]['002988'] = NULL
View(SpySto.db)
#
saveRDS(SpySto.db,'e:/tess/SpySto.RDS')
# test exclude stocks with less profit
ScodeNums = names(readRDS('e:/tess/SpySto.RDS')[['sting']])
stingRes <- data.frame(Scode = c('888888'), ENV.1 = 0)
for (Snum in 1:length(ScodeNums)) {
Scode = ScodeNums[Snum]
cat(paste0(Snum,'/',length(ScodeNums),': ',Scode,'\n'))
dailyTest = bandCrotest(Scode, bandFrom = 15, bandNum = 4, K_type = 'dailyK')
if (length(dailyTest) < 1) {
print(paste0('No profit band of stock ',Scode))
} else {
ENV.1 <- TestbandProfit(Scode,bandRes = dailyTest, MaxHoldDays = 9, mn=6, baseHold = 0, Maxband = 1,
viewNum = 15, JustProfit = T)
stingRes.i <- data.frame(Scode, ENV.1)
stingRes <- rbind.data.frame(stingRes, stingRes.i)
}
}
exclude = stingRes$Scode[which(stingRes$ENV.1 < 500)]
write.table(exclude,'e:/tess/exclude.info',row.names = F, col.names = F)
# test exclude stocks with sdJ
test.exclude = ScodeNums[which(!ScodeNums %in% exclude)]; test.res = NULL
for (Scode in test.exclude) {
dailyK.old = readRDS('e:/tess/SpySto.RDS')[['sting']][[Scode]][['dailyK']]
sdJ1 = dailyK.old[1,'J'] - dailyK.old[2,'J'];sdJ2 = dailyK.old[2,'J'] - dailyK.old[3,'J']
sdJ1 = ifelse(!anyNA(sdJ1),sdJ1,0); sdJ2 = ifelse(!anyNA(sdJ2),sdJ2,0);
sdJ.test <- (sdJ1 > 0 & sdJ2 > 0 & dailyK.old[1,'J'] < 90)
if (!sdJ.test) {test.res = c(test.res, Scode)}
}
write.table(test.res,'e:/tess/exclude.info',row.names = F, col.names = F, append = T)
# Add shitSto to exclude.info
shitSto.info = read.table('e:/tess/shitSto.info',colClasses = 'character')[,1]
write.table(shitSto.info, 'e:/tess/exclude.info',row.names = F, col.names = F, append = T)
# Record testStoDB everday
weekDay = timeDate::dayOfWeek(timeDate::Sys.timeDate('Asia/Shanghai'))[[1]]
if (file.exists('e:/tess/testStoDB.RDS')) {
testStoDB = readRDS('e:/tess/testStoDB.RDS')
} else {testStoDB = NULL}
exclude = read.table('e:/tess/exclude.info',colClasses = 'character')[,1]
testSto = ScodeNums[which(!ScodeNums %in% exclude)]
testStoDB[[weekDay]] = testSto
saveRDS(testStoDB, 'e:/tess/testStoDB.RDS')
Sys.sleep(30)
# send trading messages
sys.user = Sys.info()[['nodename']]
Money.rest = ifelse(anyNA(money),'NULL', money)
T.invest = sum(as.numeric(readRDS('e:/tess/Hsto.info.RDS')$市值))
# T.profit = sum(as.numeric(readRDS('e:/tess/Hsto.info.RDS')$盈亏))
T.profit = sum(as.numeric(readRDS('e:/tess/Hsto.info.RDS')$参考盈亏))
text = paste0('From: ',sys.user,': \nMoney rest: ', Money.rest,
'; \nTotal investing was: ',T.invest, '; \nTotal profit was: ',T.profit)
SendTrading(to = 'helongw313@outlook.com', message = text)
T.profit = sum(as.numeric(readRDS('e:/tess/Hsto.info.RDS')$盈亏))
T.profit = sum(as.numeric(readRDS('e:/tess/Hsto.info.RDS')$参考盈亏))
# load functions
source('e:/Scientist career/R_files/201911/THS/Functions.R',echo = F,encoding = 'UTF-8')
# test exclude stocks with less profit
ScodeNums = names(readRDS('e:/tess/SpySto.RDS')[['sting']])
stingRes <- data.frame(Scode = c('888888'), ENV.1 = 0)
for (Snum in 1:length(ScodeNums)) {
Scode = ScodeNums[Snum]
cat(paste0(Snum,'/',length(ScodeNums),': ',Scode,'\n'))
dailyTest = bandCrotest(Scode, bandFrom = 30, bandNum = 4, K_type = 'dailyK')
if (length(dailyTest) < 1) {
print(paste0('No profit band of stock ',Scode))
} else {
ENV.1 <- TestbandProfit(Scode,bandRes = dailyTest, MaxHoldDays = 30, mn=6, baseHold = 0, Maxband = 1,
viewNum = 15, JustProfit = T)
stingRes.i <- data.frame(Scode, ENV.1)
stingRes <- rbind.data.frame(stingRes, stingRes.i)
}
}
exclude = stingRes$Scode[which(stingRes$ENV.1 < 500)]
# test exclude stocks with sdJ
test.exclude = ScodeNums[which(!ScodeNums %in% exclude)]; test.res = NULL
for (Scode in test.exclude) {
dailyK.old = readRDS('e:/tess/SpySto.RDS')[['sting']][[Scode]][['dailyK']]
sdJ1 = dailyK.old[1,'J'] - dailyK.old[2,'J'];sdJ2 = dailyK.old[2,'J'] - dailyK.old[3,'J']
sdJ1 = ifelse(!anyNA(sdJ1),sdJ1,0); sdJ2 = ifelse(!anyNA(sdJ2),sdJ2,0);
sdJ.test <- (sdJ1 > sdJ2 & dailyK.old[1,'J'] < 90)
bandCrovalue = testbandCro(Scode,Type = 'sting', K_type = 'dailyK',bandFrom = 30, bandNum = 4)
if (!(sdJ.test & bandCrovalue)) {test.res = c(test.res, Scode)}
}
testStoDB = readRDS('e:/tess/testStoDB.RDS')
# load Hsto.info
Hsto.info = readRDS('e:/tess/Hsto.info.RDS')
holdSto = Hsto.info$证券代码;
tradeRe = NULL
# creat new tradeReports
for (Sto in holdSto) {
tradeRe[[Sto]] = data.frame(date = Sys.Date()-1, buyN = 0, sellN = 0, holdN = 0,
price = 0, cost = 0, value = 0, profit = 0, hday = 0)
tradeRe[[Sto]]$holdN = as.numeric(Hsto.info$股票余额[which(Hsto.info$证券代码 == Sto)])
tradeRe[[Sto]]$price = as.numeric(Hsto.info$市价[which(Hsto.info$证券代码 == Sto)])
tradeRe[[Sto]]$cost = as.numeric(Hsto.info$成本价[which(Hsto.info$证券代码 == Sto)])
tradeRe[[Sto]]$value = as.numeric(Hsto.info$市值[which(Hsto.info$证券代码 == Sto)])
tradeRe[[Sto]]$profit = as.numeric(Hsto.info$盈亏[which(Hsto.info$证券代码 == Sto)])
tradeRe[[Sto]]$hday = as.numeric(Hsto.info$持股天数[which(Hsto.info$证券代码 == Sto)])
}
# load functions
source('e:/Scientist career/R_files/201911/THS/Functions.R',echo = F,encoding = 'UTF-8')
# softStrokeit()
# NetWlan()
Xiadan()
shell('taskkill /F /IM xiadan.exe')
shell('taskkill /F /IM xiadan.exe')
# softStrokeit()
# NetWlan()
Xiadan()
# softStrokeit()
# NetWlan()
Xiadan()
# softStrokeit()
# NetWlan()
Xiadan()
# softStrokeit()
# NetWlan()
Xiadan()
# softStrokeit()
# NetWlan()
Xiadan()
sto.dat = NULL
sto.dat.raw = readClipboard(format = 13)
for (i in 1:NROW(sto.dat.raw)) {
sto.dat.i = strsplit(sto.dat.raw[i],'\t')[[1]]
sto.dat = rbind.data.frame(sto.dat,sto.dat.i)
}
names(sto.dat) = sto.dat[1,]
# # Renames sto.dat
names(sto.dat)[grep('代码',names(sto.dat))] = 'Code'
names(sto.dat)[grep('名称',names(sto.dat))] = 'Name'
names(sto.dat)[grep('股票余额',names(sto.dat))] = 'TotalN'
names(sto.dat)[grep('可用余额',names(sto.dat))] = 'LiveN'
names(sto.dat)[grep('冻结',names(sto.dat))] = 'FreezeN'
names(sto.dat)[grep('成本',names(sto.dat))] = 'Cost'
names(sto.dat)[grep('盈亏比例',names(sto.dat))] = 'ProPer'
names(sto.dat)[grep('盈亏',names(sto.dat))] = 'Profit'
names(sto.dat)[grep('市值',names(sto.dat))] = 'Value'
names(sto.dat)[grep('市价',names(sto.dat))] = 'Price'
names(sto.dat)[grep('天数',names(sto.dat))] = 'Hdays'
unrePos = which(!names(sto.dat) %in% c('Code','Name','TotalN','LiveN','FreezeN','Cost','Price',
'Profit','ProPer','Value','Hdays'))
names(sto.dat)[unrePos] = paste0('Var_',1:length(unrePos))
# #
sto.dat = sto.dat[-1,]
saveRDS(sto.dat,'e:/tess/Hsto.info.RDS')
# load Hsto.info
Hsto.info = readRDS('e:/tess/Hsto.info.RDS')
holdSto = Hsto.info$Code;
# load functions
source('e:/Scientist career/R_files/201911/THS/Functions.R',echo = F,encoding = 'UTF-8')
# load functions
source('e:/Scientist career/R_files/201911/THS/Functions.R',echo = F,encoding = 'UTF-8')
Sys.sleep(5);HstoInfo()
# load Hsto.info
Hsto.info = readRDS('e:/tess/Hsto.info.RDS')
holdSto = Hsto.info$Code;
tradeRe = NULL
# creat new tradeReports
for (Sto in holdSto) {
tradeRe[[Sto]] = data.frame(date = Sys.Date()-1, buyN = 0, sellN = 0, holdN = 0,
price = 0, cost = 0, value = 0, profit = 0, hday = 0)
tradeRe[[Sto]]$holdN = as.numeric(Hsto.info$TotalN[which(Hsto.info$Code == Sto)])
tradeRe[[Sto]]$price = as.numeric(Hsto.info$Price[which(Hsto.info$Code == Sto)])
tradeRe[[Sto]]$cost = as.numeric(Hsto.info$Cost[which(Hsto.info$Code == Sto)])
tradeRe[[Sto]]$value = as.numeric(Hsto.info$Value[which(Hsto.info$Code == Sto)])
tradeRe[[Sto]]$profit = as.numeric(Hsto.info$Profit[which(Hsto.info$Code == Sto)])
tradeRe[[Sto]]$hday = as.numeric(Hsto.info$Hdays[which(Hsto.info$Code == Sto)])
}
saveRDS(tradeRe,'e:/tess/tradeRe.RDS')
readRDS('e:/tess/Hsto.info.RDS')$Code
RealPrice = readRDS('e:/tess/RealPrice.RDS')
DailyTrade = readRDS('e:/tess/DailyTrading.RDS')
DailyRealPrice = readRDS('e:/tess/DailyRealPrice.RDS')
# load functions
source('e:/Scientist career/R_files/201911/THS/Functions.R',echo = F,encoding = 'UTF-8')
# load Hsto.info
Hsto.info = readRDS('e:/tess/Hsto.info.RDS')
holdSto = Hsto.info$Code;
tradeRe = readRDS('e:/tess/tradeRe.RDS')
# merge tradeReports
for (Sto in holdSto) {
tradeRe.new = data.frame(date = Sys.Date()-1, buyN = 0, sellN = 0, holdN = 0,
price = 0, cost = 0, value = 0, profit = 0, hday = 0)
if (Sto %in% names(tradeRe)) {
tradeRe.old = tradeRe[[Sto]]
tradeRe.new$holdN = as.numeric(Hsto.info$TotalN[which(Hsto.info$Code == Sto)])
tradeRe.new$price = as.numeric(Hsto.info$Price[which(Hsto.info$Code == Sto)])
tradeRe.new$cost = as.numeric(Hsto.info$Cost[which(Hsto.info$Code == Sto)])
tradeRe.new$value = as.numeric(Hsto.info$Value[which(Hsto.info$Code == Sto)])
tradeRe.new$profit = as.numeric(Hsto.info$Profit[which(Hsto.info$Code == Sto)])
tradeRe.new$hday = as.numeric(Hsto.info$Hdays[which(Hsto.info$Code == Sto)])
tradeRe[[Sto]] = rbind.data.frame(tradeRe.new, tradeRe.old)
# calculate buyN and sellN
diffN = tradeRe[[Sto]]$holdN[1] - tradeRe[[Sto]]$holdN[2]
if (diffN >= 0) {
tradeRe[[Sto]]$buyN[1] = diffN
} else {tradeRe[[Sto]]$sellN[1] = -diffN}
} else {
tradeRe[[Sto]]$holdN = as.numeric(Hsto.info$TotalN[which(Hsto.info$Code == Sto)])
tradeRe[[Sto]]$price = as.numeric(Hsto.info$Price[which(Hsto.info$Code == Sto)])
tradeRe[[Sto]]$cost = as.numeric(Hsto.info$Cost[which(Hsto.info$Code == Sto)])
tradeRe[[Sto]]$value = as.numeric(Hsto.info$Value[which(Hsto.info$Code == Sto)])
tradeRe[[Sto]]$profit = as.numeric(Hsto.info$Profit[which(Hsto.info$Code == Sto)])
tradeRe[[Sto]]$hday = as.numeric(Hsto.info$Hdays[which(Hsto.info$Code == Sto)])
}
}
saveRDS(tradeRe,'e:/tess/tradeRe.RDS')
sys.user = Sys.info()[['nodename']]
workdir = 'e:/Scientist career/R_files/202005/blogdown/tradeTHS.2/'
setwd(workdir)
ReportStoTest(title = sys.user, path = workdir, push = F, testType = c('hold','sting')[1])
ReportStoTest(title = sys.user, path = workdir, push = T, testType = c('hold','sting')[2])
clear = T
if (clear) {ClsReport(keep = 10, path = workdir)}
